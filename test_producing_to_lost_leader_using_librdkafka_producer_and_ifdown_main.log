2017-08-04 14:26:00,131 ### Running test_producing_to_lost_leader_using_librdkafka_producer_and_ifdown
2017-08-04 14:26:00,131 # Remove all docker containers for a clean start
2017-08-04 14:26:01,072 # Start zookeeper and 3 kafka instances
2017-08-04 14:26:02,835 Creating kafkanetworkfailuretests_zookeeper_1
2017-08-04 14:26:02,835 Creating kafkanetworkfailuretests_kafka_1
2017-08-04 14:26:02,835 Creating kafkanetworkfailuretests_kafka_2
2017-08-04 14:26:02,835 Creating kafkanetworkfailuretests_kafka_3
2017-08-04 14:26:02,835 # Wait for the cluster to start
2017-08-04 14:26:16,165 {'controller_epoch': 1, 'isr': [1001, 1002], 'leader': 1001, 'leader_epoch': 0, 'version': 1}
2017-08-04 14:26:17,432 # Kafka cluster has controller 1001 (716c0ffbdc68)
2017-08-04 14:26:19,838 # Topic test-topic has 1001 (716c0ffbdc68) as leader and 1002 (3c988db72c0a) as in sync replica
2017-08-04 14:26:19,838 # Note that the leader is also controller in this cluster (affects fail-over)
2017-08-04 14:26:19,838 # Start a producer and let it run for a while
2017-08-04 14:26:20,742 kafkanetworkfailuretests_zookeeper_1 is up-to-date
2017-08-04 14:26:20,743 kafkanetworkfailuretests_kafka_1 is up-to-date
2017-08-04 14:26:20,743 kafkanetworkfailuretests_kafka_2 is up-to-date
2017-08-04 14:26:20,743 kafkanetworkfailuretests_kafka_3 is up-to-date
2017-08-04 14:26:20,743 Creating kafkanetworkfailuretests_producer_librdkafka_1
2017-08-04 14:26:30,754 # Disable the leader on 1001
2017-08-04 14:26:30,754 ## Bring down eth0 on 716c0ffbdc68
2017-08-04 14:26:30,799 # Sleep for a while with the leader disconnected before checking what the producer has produced
2017-08-04 14:26:31,392 {'controller_epoch': 1, 'isr': [1001, 1002], 'leader': 1001, 'leader_epoch': 0, 'version': 1}
2017-08-04 14:26:33,977 {'controller_epoch': 1, 'isr': [1001, 1002], 'leader': 1001, 'leader_epoch': 0, 'version': 1}
2017-08-04 14:26:36,728 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:39,325 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:41,924 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:44,523 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:47,125 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:49,727 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:52,318 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:54,910 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:26:57,515 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:00,117 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:02,715 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:05,326 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:07,916 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:10,510 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:13,098 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:15,699 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:18,291 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:20,888 {'controller_epoch': 2, 'isr': [1002], 'leader': 1002, 'leader_epoch': 1, 'version': 1}
2017-08-04 14:27:22,891 # Stop the producer
2017-08-04 14:27:24,626 # Start the consumer
2017-08-04 14:27:25,541 kafkanetworkfailuretests_zookeeper_1 is up-to-date
2017-08-04 14:27:25,541 kafkanetworkfailuretests_kafka_1 is up-to-date
2017-08-04 14:27:25,541 kafkanetworkfailuretests_kafka_2 is up-to-date
2017-08-04 14:27:25,541 kafkanetworkfailuretests_kafka_3 is up-to-date
2017-08-04 14:27:25,541 Creating kafkanetworkfailuretests_consumer_java_1
2017-08-04 14:27:25,541 # Wait for 10 seconds for the consumer to consume
2017-08-04 14:27:35,549 # Stop the consumer
2017-08-04 14:27:46,318 # Logs of what the consumer consumed:
Fri Aug 4 14:27:25 UTC 2017 Starting java consumer
Fri Aug 4 14:26:21 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:21 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:22 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:22 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:23 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:23 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:24 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:24 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:25 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:25 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:26 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:26 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:27 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:27 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:28 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:28 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:29 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:29 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:30 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
Fri Aug 4 14:26:30 UTC 2017 [received Fri Aug 4 14:27:28 UTC 2017]
[2017-08-04 14:27:29,500] WARN Connection to node -1 could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)

