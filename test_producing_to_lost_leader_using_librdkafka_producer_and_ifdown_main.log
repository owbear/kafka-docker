2017-08-03 19:40:40,686 ### Running test_producing_to_lost_leader_using_librdkafka_producer_and_ifdown
2017-08-03 19:40:40,686 # Remove all docker containers for a clean start
2017-08-03 19:40:41,671 # Start zookeeper and 3 kafka instances
2017-08-03 19:40:43,678 Creating kafkanetworkfailuretests_zookeeper_1
2017-08-03 19:40:43,678 Creating kafkanetworkfailuretests_kafka_1
2017-08-03 19:40:43,678 Creating kafkanetworkfailuretests_kafka_2
2017-08-03 19:40:43,678 Creating kafkanetworkfailuretests_kafka_3
2017-08-03 19:40:43,678 # Wait for the cluster to start
2017-08-03 19:40:57,625 {'controller_epoch': 1, 'isr': [1002, 1003], 'leader': 1002, 'leader_epoch': 0, 'version': 1}
2017-08-03 19:40:58,913 # Kafka cluster has controller 1001 (d1ac9d4ef64d)
2017-08-03 19:41:01,483 # Topic test-topic has 1002 (8084e9f76473) as leader and 1003 (f3fc0945c236) as in sync replica
2017-08-03 19:41:01,483 # Note that the leader is also controller in this cluster (affects fail-over)
2017-08-03 19:41:01,483 # Start a producer and let it run for a while
2017-08-03 19:41:02,525 kafkanetworkfailuretests_zookeeper_1 is up-to-date
2017-08-03 19:41:02,525 kafkanetworkfailuretests_kafka_1 is up-to-date
2017-08-03 19:41:02,525 kafkanetworkfailuretests_kafka_2 is up-to-date
2017-08-03 19:41:02,525 kafkanetworkfailuretests_kafka_3 is up-to-date
2017-08-03 19:41:02,525 Creating kafkanetworkfailuretests_producer_librdkafka_1
2017-08-03 19:41:12,530 # Disable the leader on 1002
2017-08-03 19:41:12,530 ## Bring down eth0 on 8084e9f76473
2017-08-03 19:41:12,585 # Sleep for a while with the leader disconnected before checking what the producer has produced
2017-08-03 19:41:13,212 {'controller_epoch': 1, 'isr': [1002, 1003], 'leader': 1002, 'leader_epoch': 0, 'version': 1}
2017-08-03 19:41:15,849 {'controller_epoch': 1, 'isr': [1002, 1003], 'leader': 1002, 'leader_epoch': 0, 'version': 1}
2017-08-03 19:41:18,603 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:21,292 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:23,925 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:26,578 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:29,217 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:31,867 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:34,518 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:37,184 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:39,811 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:42,440 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:45,068 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:47,716 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:50,337 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:52,958 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:55,581 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:41:58,222 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:42:00,850 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:42:03,527 {'controller_epoch': 1, 'isr': [1003], 'leader': 1003, 'leader_epoch': 1, 'version': 1}
2017-08-03 19:42:05,528 # Stop the producer
2017-08-03 19:42:07,371 # Start the consumer
2017-08-03 19:42:08,502 kafkanetworkfailuretests_zookeeper_1 is up-to-date
2017-08-03 19:42:08,502 kafkanetworkfailuretests_kafka_1 is up-to-date
2017-08-03 19:42:08,502 kafkanetworkfailuretests_kafka_2 is up-to-date
2017-08-03 19:42:08,502 kafkanetworkfailuretests_kafka_3 is up-to-date
2017-08-03 19:42:08,502 Creating kafkanetworkfailuretests_consumer_java_1
2017-08-03 19:42:08,502 # Wait for 10 seconds for the consumer to consume
2017-08-03 19:42:18,513 # Stop the consumer
2017-08-03 19:42:29,372 # Logs of what the consumer consumed:
Thu Aug 3 19:42:08 UTC 2017 Starting java consumer
Thu Aug 3 19:41:02 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:03 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:03 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:04 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:04 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:05 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:05 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:06 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:07 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:07 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:08 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:08 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:09 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:09 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:10 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:10 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:11 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:11 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:12 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]
Thu Aug 3 19:41:12 UTC 2017 [received Thu Aug 3 19:42:13 UTC 2017]

